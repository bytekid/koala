type token =
  | Equality
  | NegEquality
  | Comma
  | Dot
  | Column
  | LeftParen
  | RightParen
  | LBrace
  | RBrace
  | True
  | False
  | ForAll
  | Exists
  | And
  | NegAnd
  | Or
  | NegOr
  | Negation
  | ImplicationLR
  | ImplicationRL
  | Equivalence
  | NegEquivalence
  | Positive_Decimal of (string)
  | Decimal of (string)
  | Decimal_fraction of (string)
  | Decimal_exponent of (string)
  | Plus
  | Minus
  | Slash
  | Exponent
  | Star
  | Arrow
  | Less_Sign
  | CNF_T of (string)
  | FOF_T of (string)
  | TFF_T of (string)
  | TCF_T of (string)
  | THF_T of (string)
  | Include of (string)
  | Type of (string)
  | STATE_SEP
  | UpperWord of (string)
  | LowerWord of (string)
  | DollarWord of (string)
  | DollarDollarWord of (string)
  | String of (string)
  | QuotedStr of (string)
  | CommentPercent of (string)
  | CommentEprover of (string)
  | CommentStar of (string)
  | AnnotationPercent of (string)
  | AnnotationStar of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "src/parser_tptp.mly"
open Lib 
open Parser_types
   
 let disquote_string  str = 
      String.sub str 1 ((String.length str)-2)
 let parse_error s =  raise Parser_types.Parsing_fails (* raise FOF_format*) (* TODO: hack to continue with extrenal clausifier *) (* raise Parser_types.Parsing_fails *)
# 66 "src/parser_tptp.ml"
let yytransl_const = [|
  257 (* Equality *);
  258 (* NegEquality *);
  259 (* Comma *);
  260 (* Dot *);
  261 (* Column *);
  262 (* LeftParen *);
  263 (* RightParen *);
  264 (* LBrace *);
  265 (* RBrace *);
  266 (* True *);
  267 (* False *);
  268 (* ForAll *);
  269 (* Exists *);
  270 (* And *);
  271 (* NegAnd *);
  272 (* Or *);
  273 (* NegOr *);
  274 (* Negation *);
  275 (* ImplicationLR *);
  276 (* ImplicationRL *);
  277 (* Equivalence *);
  278 (* NegEquivalence *);
  283 (* Plus *);
  284 (* Minus *);
  285 (* Slash *);
  286 (* Exponent *);
  287 (* Star *);
  288 (* Arrow *);
  289 (* Less_Sign *);
  297 (* STATE_SEP *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  279 (* Positive_Decimal *);
  280 (* Decimal *);
  281 (* Decimal_fraction *);
  282 (* Decimal_exponent *);
  290 (* CNF_T *);
  291 (* FOF_T *);
  292 (* TFF_T *);
  293 (* TCF_T *);
  294 (* THF_T *);
  295 (* Include *);
  296 (* Type *);
  298 (* UpperWord *);
  299 (* LowerWord *);
  300 (* DollarWord *);
  301 (* DollarDollarWord *);
  302 (* String *);
  303 (* QuotedStr *);
  304 (* CommentPercent *);
  305 (* CommentEprover *);
  306 (* CommentStar *);
  307 (* AnnotationPercent *);
  308 (* AnnotationStar *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\002\000\002\000\002\000\002\000\004\000\
\007\000\008\000\008\000\010\000\010\000\005\000\005\000\005\000\
\006\000\006\000\003\000\003\000\003\000\003\000\003\000\003\000\
\016\000\016\000\016\000\017\000\018\000\018\000\019\000\019\000\
\021\000\021\000\022\000\023\000\024\000\020\000\015\000\015\000\
\015\000\028\000\028\000\029\000\031\000\031\000\031\000\032\000\
\032\000\032\000\036\000\036\000\038\000\038\000\039\000\039\000\
\026\000\026\000\026\000\037\000\037\000\027\000\027\000\027\000\
\025\000\025\000\042\000\042\000\043\000\043\000\040\000\040\000\
\044\000\044\000\014\000\014\000\014\000\046\000\046\000\045\000\
\045\000\048\000\048\000\013\000\013\000\013\000\050\000\050\000\
\051\000\051\000\051\000\051\000\051\000\051\000\053\000\052\000\
\052\000\052\000\055\000\055\000\047\000\047\000\033\000\049\000\
\058\000\058\000\054\000\054\000\060\000\059\000\059\000\059\000\
\061\000\061\000\063\000\064\000\066\000\066\000\062\000\062\000\
\030\000\030\000\034\000\056\000\056\000\057\000\067\000\067\000\
\069\000\069\000\068\000\070\000\071\000\012\000\065\000\065\000\
\065\000\073\000\073\000\075\000\075\000\076\000\074\000\074\000\
\077\000\077\000\078\000\078\000\079\000\080\000\072\000\072\000\
\081\000\081\000\035\000\011\000\011\000\041\000\041\000\041\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\009\000\
\082\000\082\000\082\000\000\000"

let yylen = "\002\000\
\000\000\002\000\001\000\001\000\001\000\001\000\001\000\006\000\
\001\000\000\000\002\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\010\000\001\000\001\000\009\000\010\000\010\000\
\001\000\001\000\003\000\006\000\001\000\001\000\001\000\003\000\
\001\000\001\000\003\000\001\000\001\000\001\000\003\000\005\000\
\003\000\001\000\003\000\006\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\001\000\003\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\001\000\001\000\001\000\001\000\001\000\001\000\003\000\005\000\
\003\000\003\000\000\000\001\000\003\000\000\000\002\000\001\000\
\001\000\002\000\003\000\003\000\005\000\001\000\001\000\003\000\
\001\000\001\000\002\000\004\000\003\000\003\000\003\000\001\000\
\001\000\001\000\001\000\004\000\001\000\004\000\001\000\001\000\
\001\000\003\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\004\000\001\000\004\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\004\000\
\001\000\004\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\002\000\002\000\003\000\001\000\001\000\
\002\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\002\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\000\000\000\000\020\000\000\000\000\000\
\021\000\000\000\014\000\016\000\015\000\017\000\018\000\002\000\
\004\000\005\000\006\000\007\000\000\000\000\000\000\000\000\000\
\169\000\000\000\000\000\161\000\162\000\163\000\164\000\165\000\
\166\000\167\000\158\000\168\000\159\000\000\000\156\000\157\000\
\160\000\000\000\000\000\000\000\009\000\170\000\171\000\000\000\
\000\000\000\000\000\000\000\000\134\000\000\000\000\000\000\000\
\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\008\000\121\000\000\000\000\000\000\000\149\000\150\000\
\000\000\000\000\109\000\122\000\123\000\000\000\000\000\000\000\
\000\000\152\000\103\000\110\000\000\000\087\000\089\000\090\000\
\000\000\096\000\097\000\098\000\107\000\108\000\111\000\112\000\
\113\000\114\000\115\000\116\000\124\000\125\000\126\000\135\000\
\136\000\137\000\138\000\139\000\143\000\144\000\147\000\148\000\
\151\000\000\000\000\000\000\000\058\000\057\000\059\000\000\000\
\029\000\030\000\025\000\000\000\026\000\000\000\000\000\013\000\
\000\000\000\000\000\000\000\000\000\000\091\000\000\000\000\000\
\153\000\140\000\145\000\154\000\141\000\146\000\000\000\000\000\
\000\000\000\000\000\000\000\000\133\000\000\000\000\000\132\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\084\000\093\000\094\000\000\000\142\000\000\000\000\000\000\000\
\080\000\081\000\000\000\000\000\000\000\000\000\105\000\000\000\
\000\000\000\000\000\000\088\000\095\000\131\000\041\000\022\000\
\000\000\067\000\068\000\000\000\000\000\063\000\065\000\066\000\
\000\000\000\000\027\000\000\000\037\000\000\000\000\000\033\000\
\034\000\000\000\000\000\000\000\092\000\082\000\000\000\000\000\
\000\000\077\000\019\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\023\000\000\000\000\000\000\000\024\000\
\085\000\083\000\000\000\079\000\000\000\000\000\106\000\000\000\
\064\000\000\000\073\000\000\000\042\000\000\000\071\000\074\000\
\000\000\032\000\035\000\102\000\118\000\120\000\000\000\000\000\
\000\000\038\000\028\000\072\000\043\000\046\000\000\000\045\000\
\047\000\000\000\000\000\155\000\061\000\000\000\060\000\048\000\
\049\000\050\000\000\000\000\000\000\000\000\000\044\000\000\000\
\000\000\051\000\052\000\054\000\056\000"

let yydgoto = "\002\000\
\004\000\016\000\017\000\018\000\019\000\020\000\044\000\052\000\
\037\000\058\000\038\000\054\000\123\000\144\000\115\000\124\000\
\125\000\126\000\198\000\003\001\199\000\200\000\201\000\202\000\
\221\000\116\000\189\000\244\000\245\000\079\000\007\001\014\001\
\167\000\081\000\082\000\017\001\020\001\021\001\022\001\190\000\
\083\000\192\000\193\000\194\000\168\000\210\000\084\000\170\000\
\174\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\176\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\102\000\103\000\151\000\152\000\104\000\
\105\000\106\000\107\000\108\000\109\000\110\000\111\000\112\000\
\113\000\040\000\041\000"

let yysindex = "\019\000\
\033\000\000\000\000\000\042\001\035\255\000\000\059\255\080\255\
\000\000\122\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\028\001\028\001\028\001\058\255\
\000\000\106\255\120\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\142\255\000\000\000\000\
\000\000\151\255\156\255\159\255\000\000\000\000\000\000\109\255\
\038\255\109\255\028\001\162\255\000\000\168\255\169\255\176\255\
\194\255\215\255\000\000\207\255\082\000\233\255\219\255\219\255\
\028\001\000\000\000\000\122\000\202\000\174\255\000\000\000\000\
\150\255\150\255\000\000\000\000\000\000\216\255\192\255\220\255\
\227\255\000\000\000\000\000\000\190\255\000\000\000\000\000\000\
\099\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\233\255\228\255\222\255\000\000\000\000\000\000\042\000\
\000\000\000\000\000\000\216\255\000\000\230\255\216\255\000\000\
\082\000\031\255\234\255\235\255\006\001\000\000\239\255\224\255\
\000\000\000\000\000\000\000\000\000\000\000\000\176\000\242\255\
\006\001\006\001\006\001\162\000\000\000\006\001\006\001\000\000\
\243\255\247\255\147\255\245\255\253\255\223\255\011\000\012\000\
\000\000\000\000\000\000\016\000\000\000\234\000\023\000\022\000\
\000\000\000\000\026\000\027\000\028\000\024\000\000\000\039\000\
\037\000\038\000\006\001\000\000\000\000\000\000\000\000\000\000\
\138\000\000\000\000\000\015\000\031\000\000\000\000\000\000\000\
\029\000\032\000\000\000\061\000\000\000\063\000\070\000\000\000\
\000\000\059\000\071\000\067\000\000\000\000\000\081\000\006\001\
\176\000\000\000\000\000\006\001\006\001\000\000\006\001\000\000\
\000\000\234\255\235\255\083\001\015\000\097\000\037\255\083\001\
\018\255\083\001\083\001\000\000\086\000\223\255\083\001\000\000\
\000\000\000\000\104\000\000\000\105\000\106\000\000\000\107\000\
\000\000\083\000\000\000\114\000\000\000\125\000\000\000\000\000\
\082\000\000\000\000\000\000\000\000\000\000\000\083\001\018\255\
\058\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\
\000\000\016\255\103\255\000\000\000\000\144\000\000\000\000\000\
\000\000\000\000\140\000\149\000\145\000\146\000\000\000\129\000\
\098\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\001\000\000\000\000\000\170\001\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\164\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\172\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\027\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\184\000\025\000\055\000\
\249\000\000\000\000\000\000\000\032\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\184\000\000\000\000\000\184\000\000\000\
\000\000\000\000\177\000\178\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\185\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\154\255\188\000\
\000\000\000\000\000\000\186\255\214\255\000\000\000\000\075\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\042\255\210\000\000\000\000\000\000\000\
\000\000\064\255\000\000\000\000\000\000\000\000\209\000\000\000\
\000\000\028\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\081\001\000\000\097\001\
\100\001\000\000\000\000\000\000\076\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\213\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\212\000\215\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\198\001\000\000\084\000\064\000\195\255\005\000\111\001\167\001\
\112\001\000\000\003\001\000\000\000\000\000\000\000\000\000\000\
\149\255\000\000\000\000\000\000\248\000\199\255\000\000\000\000\
\203\255\221\255\205\255\000\000\224\000\229\000\230\000\069\001\
\237\255\000\000\078\255\000\000\048\001\000\000\119\255\000\000\
\135\255\206\255\116\001\200\255\202\255\208\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\000\000\060\000\000\000\000\000\
\000\000\000\000\000\000"

let yytablesize = 642
let yytable = "\078\000\
\001\000\039\000\039\000\039\000\117\000\169\000\223\000\080\000\
\118\000\080\000\080\000\131\000\134\000\132\000\080\000\080\000\
\067\000\130\000\067\000\001\000\135\000\137\000\140\000\011\001\
\177\000\178\000\119\000\155\000\155\000\155\000\036\000\039\000\
\003\000\155\000\086\000\155\000\036\000\161\000\086\000\012\001\
\021\000\240\000\155\000\242\000\207\000\039\000\148\000\188\000\
\062\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\117\000\062\000\035\000\076\000\118\000\076\000\036\000\131\000\
\022\000\132\000\080\000\160\000\226\000\130\000\070\000\169\000\
\131\000\069\000\132\000\080\000\164\000\055\000\119\000\080\000\
\053\000\104\000\069\000\104\000\135\000\023\000\235\000\172\000\
\172\000\172\000\237\000\238\000\172\000\172\000\080\000\070\000\
\175\000\175\000\175\000\149\000\150\000\181\000\182\000\067\000\
\036\000\042\000\043\000\069\000\172\000\173\000\173\000\173\000\
\056\000\057\000\173\000\173\000\243\000\175\000\247\000\248\000\
\138\000\141\000\218\000\251\000\219\000\080\000\012\001\024\000\
\157\000\046\000\173\000\159\000\139\000\142\000\059\000\191\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\047\000\
\048\000\035\000\076\000\004\001\128\000\036\000\172\000\053\000\
\185\000\049\000\172\000\172\000\101\000\172\000\050\000\175\000\
\101\000\051\000\101\000\175\000\175\000\191\000\239\000\246\000\
\060\000\101\000\061\000\062\000\173\000\070\000\071\000\072\000\
\173\000\173\000\063\000\173\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\002\001\117\000\035\000\186\000\187\000\
\117\000\036\000\117\000\080\000\064\000\145\000\246\000\006\001\
\191\000\117\000\136\000\008\001\191\000\148\000\191\000\191\000\
\013\001\013\001\066\000\191\000\015\001\015\001\016\001\019\001\
\119\000\065\000\143\000\067\000\119\000\009\001\119\000\013\001\
\120\000\146\000\155\000\015\001\019\001\119\000\121\000\122\000\
\147\000\067\000\154\000\191\000\069\000\158\000\114\000\149\000\
\162\000\163\000\070\000\071\000\072\000\073\000\074\000\165\000\
\171\000\183\000\184\000\195\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\196\000\075\000\035\000\076\000\077\000\
\197\000\036\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\203\000\204\000\035\000\076\000\077\000\205\000\036\000\
\209\000\117\000\117\000\127\000\208\000\211\000\214\000\127\000\
\212\000\213\000\001\000\001\000\001\000\001\000\001\000\001\000\
\127\000\215\000\067\000\216\000\217\000\224\000\225\000\129\000\
\001\000\001\000\001\000\001\000\001\000\121\000\122\000\101\000\
\101\000\099\000\067\000\069\000\226\000\099\000\227\000\231\000\
\228\000\070\000\071\000\072\000\073\000\074\000\099\000\229\000\
\230\000\233\000\232\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\067\000\075\000\035\000\076\000\077\000\068\000\
\036\000\234\000\249\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\067\000\069\000\035\000\076\000\077\000\241\000\
\036\000\070\000\071\000\072\000\073\000\074\000\252\000\253\000\
\254\000\242\000\255\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\067\000\075\000\035\000\076\000\077\000\129\000\
\036\000\000\001\001\001\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\010\001\069\000\035\000\076\000\024\001\220\000\
\036\000\070\000\071\000\072\000\073\000\074\000\023\001\025\001\
\012\001\026\001\027\001\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\067\000\075\000\035\000\076\000\077\000\179\000\
\036\000\172\000\010\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\011\000\069\000\035\000\186\000\187\000\166\000\
\036\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\089\000\090\000\078\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\067\000\075\000\035\000\076\000\077\000\133\000\
\036\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\039\000\031\000\035\000\040\000\053\000\045\000\036\000\055\000\
\153\000\070\000\071\000\072\000\073\000\074\000\127\000\156\000\
\250\000\018\001\067\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\206\000\075\000\035\000\076\000\077\000\005\001\
\036\000\119\000\119\000\129\000\028\001\222\000\029\001\129\000\
\236\000\070\000\071\000\072\000\073\000\074\000\067\000\180\000\
\129\000\000\000\000\000\028\000\029\000\030\000\031\000\032\000\
\033\000\034\000\000\000\075\000\035\000\076\000\077\000\000\000\
\036\000\000\000\000\000\000\000\000\000\070\000\071\000\072\000\
\073\000\074\000\000\000\000\000\000\000\000\000\000\000\028\000\
\029\000\030\000\031\000\032\000\033\000\034\000\000\000\075\000\
\035\000\076\000\077\000\025\000\036\000\000\000\026\000\027\000\
\000\000\000\000\000\000\000\000\000\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\000\000\000\000\035\000\000\000\
\000\000\000\000\036\000\005\000\006\000\007\000\008\000\009\000\
\010\000\118\000\118\000\128\000\000\000\000\000\000\000\128\000\
\000\000\011\000\012\000\013\000\014\000\015\000\000\000\000\000\
\128\000\102\000\102\000\100\000\120\000\120\000\130\000\100\000\
\000\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\
\100\000\000\000\000\000\130\000\028\000\029\000\030\000\031\000\
\032\000\033\000\034\000\000\000\000\000\035\000\186\000\187\000\
\000\000\036\000"

let yycheck = "\061\000\
\000\000\021\000\022\000\023\000\062\000\143\000\185\000\061\000\
\062\000\063\000\064\000\068\000\069\000\068\000\068\000\069\000\
\001\001\068\000\001\001\001\000\069\000\073\000\074\000\008\001\
\146\000\147\000\062\000\001\001\002\001\003\001\003\001\051\000\
\000\000\007\001\003\001\009\001\009\001\007\001\007\001\024\001\
\006\001\220\000\016\001\007\001\166\000\065\000\016\001\155\000\
\007\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\114\000\016\001\043\001\044\001\114\000\044\001\047\001\120\000\
\006\001\120\000\120\000\129\000\032\001\120\000\007\001\209\000\
\129\000\032\001\129\000\129\000\133\000\040\001\114\000\133\000\
\043\001\007\001\007\001\009\001\133\000\006\001\208\000\145\000\
\146\000\147\000\212\000\213\000\150\000\151\000\148\000\032\001\
\145\000\146\000\147\000\001\001\002\001\150\000\151\000\001\001\
\047\001\022\000\023\000\032\001\166\000\145\000\146\000\147\000\
\049\000\050\000\150\000\151\000\224\000\166\000\226\000\227\000\
\073\000\074\000\179\000\231\000\179\000\179\000\024\001\006\001\
\124\000\024\001\166\000\127\000\073\000\074\000\051\000\155\000\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\024\001\
\003\001\043\001\044\001\255\000\065\000\047\001\208\000\043\001\
\006\001\003\001\212\000\213\000\003\001\215\000\003\001\208\000\
\007\001\003\001\009\001\212\000\213\000\185\000\215\000\225\000\
\007\001\016\001\003\001\003\001\208\000\024\001\025\001\026\001\
\212\000\213\000\003\001\215\000\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\249\000\003\001\043\001\044\001\045\001\
\007\001\047\001\009\001\249\000\003\001\006\001\000\001\001\001\
\220\000\016\001\029\001\001\001\224\000\016\001\226\000\227\000\
\010\001\011\001\004\001\231\000\010\001\011\001\010\001\011\001\
\003\001\003\001\003\001\001\001\007\001\001\001\009\001\025\001\
\006\001\006\001\005\001\025\001\024\001\016\001\012\001\013\001\
\006\001\001\001\007\001\255\000\018\001\008\001\006\001\001\001\
\007\001\007\001\024\001\025\001\026\001\027\001\028\001\024\001\
\007\001\007\001\004\001\007\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\007\001\042\001\043\001\044\001\045\001\
\042\001\047\001\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\007\001\007\001\043\001\044\001\045\001\007\001\047\001\
\003\001\001\001\002\001\003\001\006\001\004\001\007\001\007\001\
\006\001\006\001\034\001\035\001\036\001\037\001\038\001\039\001\
\016\001\003\001\001\001\007\001\007\001\031\001\016\001\006\001\
\048\001\049\001\050\001\051\001\052\001\012\001\013\001\001\001\
\002\001\003\001\001\001\018\001\032\001\007\001\031\001\005\001\
\004\001\024\001\025\001\026\001\027\001\028\001\016\001\009\001\
\003\001\007\001\004\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\001\001\042\001\043\001\044\001\045\001\006\001\
\047\001\009\001\005\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\001\001\018\001\043\001\044\001\045\001\007\001\
\047\001\024\001\025\001\026\001\027\001\028\001\007\001\007\001\
\007\001\007\001\032\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\001\001\042\001\043\001\044\001\045\001\006\001\
\047\001\016\001\006\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\003\001\018\001\043\001\044\001\003\001\006\001\
\047\001\024\001\025\001\026\001\027\001\028\001\007\001\003\001\
\024\001\009\001\009\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\001\001\042\001\043\001\044\001\045\001\006\001\
\047\001\000\000\007\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\007\001\018\001\043\001\044\001\045\001\008\001\
\047\001\024\001\025\001\026\001\027\001\028\001\007\001\007\001\
\016\001\016\001\007\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\001\001\042\001\043\001\044\001\045\001\006\001\
\047\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\007\001\009\001\043\001\007\001\009\001\024\000\047\001\009\001\
\114\000\024\001\025\001\026\001\027\001\028\001\064\000\120\000\
\230\000\010\001\001\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\009\001\042\001\043\001\044\001\045\001\000\001\
\047\001\001\001\002\001\003\001\024\001\185\000\025\001\007\001\
\209\000\024\001\025\001\026\001\027\001\028\001\001\001\148\000\
\016\001\255\255\255\255\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\255\255\042\001\043\001\044\001\045\001\255\255\
\047\001\255\255\255\255\255\255\255\255\024\001\025\001\026\001\
\027\001\028\001\255\255\255\255\255\255\255\255\255\255\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\255\255\042\001\
\043\001\044\001\045\001\024\001\047\001\255\255\027\001\028\001\
\255\255\255\255\255\255\255\255\255\255\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\255\255\255\255\043\001\255\255\
\255\255\255\255\047\001\034\001\035\001\036\001\037\001\038\001\
\039\001\001\001\002\001\003\001\255\255\255\255\255\255\007\001\
\255\255\048\001\049\001\050\001\051\001\052\001\255\255\255\255\
\016\001\001\001\002\001\003\001\001\001\002\001\003\001\007\001\
\255\255\255\255\007\001\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\016\001\034\001\035\001\036\001\037\001\
\038\001\039\001\040\001\255\255\255\255\043\001\044\001\045\001\
\255\255\047\001"

let yynames_const = "\
  Equality\000\
  NegEquality\000\
  Comma\000\
  Dot\000\
  Column\000\
  LeftParen\000\
  RightParen\000\
  LBrace\000\
  RBrace\000\
  True\000\
  False\000\
  ForAll\000\
  Exists\000\
  And\000\
  NegAnd\000\
  Or\000\
  NegOr\000\
  Negation\000\
  ImplicationLR\000\
  ImplicationRL\000\
  Equivalence\000\
  NegEquivalence\000\
  Plus\000\
  Minus\000\
  Slash\000\
  Exponent\000\
  Star\000\
  Arrow\000\
  Less_Sign\000\
  STATE_SEP\000\
  EOF\000\
  "

let yynames_block = "\
  Positive_Decimal\000\
  Decimal\000\
  Decimal_fraction\000\
  Decimal_exponent\000\
  CNF_T\000\
  FOF_T\000\
  TFF_T\000\
  TCF_T\000\
  THF_T\000\
  Include\000\
  Type\000\
  UpperWord\000\
  LowerWord\000\
  DollarWord\000\
  DollarDollarWord\000\
  String\000\
  QuotedStr\000\
  CommentPercent\000\
  CommentEprover\000\
  CommentStar\000\
  AnnotationPercent\000\
  AnnotationStar\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "src/parser_tptp.mly"
                      ()
# 546 "src/parser_tptp.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : unit) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unit) in
    Obj.repr(
# 78 "src/parser_tptp.mly"
             ()
# 554 "src/parser_tptp.ml"
               : unit))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "src/parser_tptp.mly"
             ()
# 560 "src/parser_tptp.ml"
               : unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annotated_formula) in
    Obj.repr(
# 85 "src/parser_tptp.mly"
                     (_1)
# 567 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'include_file) in
    Obj.repr(
# 86 "src/parser_tptp.mly"
                     (_1)
# 574 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'comment) in
    Obj.repr(
# 87 "src/parser_tptp.mly"
                     (_1)
# 581 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'annotation) in
    Obj.repr(
# 88 "src/parser_tptp.mly"
                     (_1)
# 588 "src/parser_tptp.ml"
               : 'unit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'file_name) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'formula_selection) in
    Obj.repr(
# 94 "src/parser_tptp.mly"
     (include_file_fun _3 _4)
# 597 "src/parser_tptp.ml"
               : 'include_file))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'single_quoted) in
    Obj.repr(
# 97 "src/parser_tptp.mly"
                          (_1)
# 604 "src/parser_tptp.ml"
               : 'file_name))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "src/parser_tptp.mly"
                 ([])
# 610 "src/parser_tptp.ml"
               : 'formula_selection))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'name_list) in
    Obj.repr(
# 102 "src/parser_tptp.mly"
                   (_2)
# 617 "src/parser_tptp.ml"
               : 'formula_selection))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 106 "src/parser_tptp.mly"
      ([_1])
# 624 "src/parser_tptp.ml"
               : 'name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'name_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'name) in
    Obj.repr(
# 107 "src/parser_tptp.mly"
                        (_3::_1)
# 632 "src/parser_tptp.ml"
               : 'name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 111 "src/parser_tptp.mly"
                 ((comment_fun _1))
# 639 "src/parser_tptp.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 112 "src/parser_tptp.mly"
                 ((comment_fun _1))
# 646 "src/parser_tptp.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "src/parser_tptp.mly"
                 ((comment_E_prover_fun _1))
# 653 "src/parser_tptp.ml"
               : 'comment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 119 "src/parser_tptp.mly"
                    ((annotation_fun _1))
# 660 "src/parser_tptp.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 120 "src/parser_tptp.mly"
                    ((annotation_fun _1))
# 667 "src/parser_tptp.ml"
               : 'annotation))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formula_role) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'cnf_formula) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'formula_annotations) in
    Obj.repr(
# 126 "src/parser_tptp.mly"
                                                    ((*assign_input_problem_type CNF;*) (cnf_formula_fun _3 _5 _7 _8))
# 678 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 127 "src/parser_tptp.mly"
        (assign_input_problem_type FOF; raise FOF_format)
# 685 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "src/parser_tptp.mly"
        (assign_input_problem_type THF; raise THF_format)
# 692 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'tff_typed_atom) in
    Obj.repr(
# 135 "src/parser_tptp.mly"
                                                                       (assign_input_problem_type TFF; _7)
# 702 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formula_role) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'tff_cnf_formula) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'formula_annotations) in
    Obj.repr(
# 141 "src/parser_tptp.mly"
                                         (assign_input_problem_type TFF; cnf_formula_fun _3 _5 _7 _8)
# 713 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : 'name) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formula_role) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'tff_cnf_formula) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'formula_annotations) in
    Obj.repr(
# 146 "src/parser_tptp.mly"
                                         (assign_input_problem_type TFF; cnf_formula_fun _3 _5 _7 _8)
# 724 "src/parser_tptp.ml"
               : 'annotated_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cnf_formula) in
    Obj.repr(
# 159 "src/parser_tptp.mly"
                (_1)
# 731 "src/parser_tptp.ml"
               : 'tff_cnf_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_quantified_formula) in
    Obj.repr(
# 160 "src/parser_tptp.mly"
                            (tff_reset_vt (); _1)
# 738 "src/parser_tptp.ml"
               : 'tff_cnf_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tff_quantified_formula) in
    Obj.repr(
# 161 "src/parser_tptp.mly"
                                                  (tff_reset_vt (); _2)
# 745 "src/parser_tptp.ml"
               : 'tff_cnf_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'tff_fol_quantifier) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'tff_variable_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'tff_unitary_formula) in
    Obj.repr(
# 164 "src/parser_tptp.mly"
                                                                                    (_6)
# 754 "src/parser_tptp.ml"
               : 'tff_quantified_formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "src/parser_tptp.mly"
            ()
# 760 "src/parser_tptp.ml"
               : 'tff_fol_quantifier))
; (fun __caml_parser_env ->
    Obj.repr(
# 169 "src/parser_tptp.mly"
             (raise TFF_format)
# 766 "src/parser_tptp.ml"
               : 'tff_fol_quantifier))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_variable) in
    Obj.repr(
# 172 "src/parser_tptp.mly"
                ()
# 773 "src/parser_tptp.ml"
               : 'tff_variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tff_variable) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tff_variable_list) in
    Obj.repr(
# 173 "src/parser_tptp.mly"
                                         ()
# 781 "src/parser_tptp.ml"
               : 'tff_variable_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_typed_variable) in
    Obj.repr(
# 177 "src/parser_tptp.mly"
                       ()
# 788 "src/parser_tptp.ml"
               : 'tff_variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_default_type_variable) in
    Obj.repr(
# 178 "src/parser_tptp.mly"
                              ()
# 795 "src/parser_tptp.ml"
               : 'tff_variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tff_atomic_type) in
    Obj.repr(
# 182 "src/parser_tptp.mly"
                                          (tff_typed_variable_fun _1 _3)
# 803 "src/parser_tptp.ml"
               : 'tff_typed_variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable_name) in
    Obj.repr(
# 184 "src/parser_tptp.mly"
                                          (_1)
# 810 "src/parser_tptp.ml"
               : 'tff_default_type_variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 187 "src/parser_tptp.mly"
            (_1)
# 817 "src/parser_tptp.ml"
               : 'variable_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cnf_formula) in
    Obj.repr(
# 190 "src/parser_tptp.mly"
              (_1)
# 824 "src/parser_tptp.ml"
               : 'tff_unitary_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tff_untyped_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tff_top_level_type) in
    Obj.repr(
# 206 "src/parser_tptp.mly"
                                              (ttf_add_typed_atom_fun _1 _3)
# 832 "src/parser_tptp.ml"
               : 'tff_typed_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'tff_untyped_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'tff_top_level_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list) in
    Obj.repr(
# 208 "src/parser_tptp.mly"
      (ttf_add_typed_atom_atrr_fun _1 _3 (List.rev _5))
# 841 "src/parser_tptp.ml"
               : 'tff_typed_atom))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tff_typed_atom) in
    Obj.repr(
# 209 "src/parser_tptp.mly"
                                       (_2)
# 848 "src/parser_tptp.ml"
               : 'tff_typed_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 212 "src/parser_tptp.mly"
         ([_1])
# 855 "src/parser_tptp.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr) in
    Obj.repr(
# 213 "src/parser_tptp.mly"
                      (_3::_1)
# 863 "src/parser_tptp.ml"
               : 'attr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'defined_functor) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'attr_name) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'attr_args) in
    Obj.repr(
# 217 "src/parser_tptp.mly"
      (match _1 with 
      |"$attr" ->
	  attr_fun _3 _5
      |_-> raise Parser_types.Parsing_fails
(*failwith ("parsing failes: should be $attr in place of "^$1)*)
     )
# 877 "src/parser_tptp.ml"
               : 'attr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functor_name) in
    Obj.repr(
# 225 "src/parser_tptp.mly"
              (_1)
# 884 "src/parser_tptp.ml"
               : 'attr_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_functor) in
    Obj.repr(
# 226 "src/parser_tptp.mly"
                   (_1)
# 891 "src/parser_tptp.ml"
               : 'attr_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'system_functor) in
    Obj.repr(
# 227 "src/parser_tptp.mly"
                  (_1)
# 898 "src/parser_tptp.ml"
               : 'attr_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_integer) in
    Obj.repr(
# 231 "src/parser_tptp.mly"
                       (Attr_Int (_1))
# 905 "src/parser_tptp.ml"
               : 'attr_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_list_arg) in
    Obj.repr(
# 232 "src/parser_tptp.mly"
                  ( _1 )
# 912 "src/parser_tptp.ml"
               : 'attr_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_str_arg) in
    Obj.repr(
# 234 "src/parser_tptp.mly"
                 ( Attr_Str _1 )
# 919 "src/parser_tptp.ml"
               : 'attr_args))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_ilist_arg_list) in
    Obj.repr(
# 243 "src/parser_tptp.mly"
                                      ( Attr_IList _2 )
# 926 "src/parser_tptp.ml"
               : 'attr_list_arg))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'attr_slist_arg_list) in
    Obj.repr(
# 244 "src/parser_tptp.mly"
                                      ( Attr_SList _2 )
# 933 "src/parser_tptp.ml"
               : 'attr_list_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_integer) in
    Obj.repr(
# 248 "src/parser_tptp.mly"
                     ( [_1] )
# 940 "src/parser_tptp.ml"
               : 'attr_ilist_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'unsigned_integer) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_ilist_arg_list) in
    Obj.repr(
# 249 "src/parser_tptp.mly"
                                               ( _1 :: _3 )
# 948 "src/parser_tptp.ml"
               : 'attr_ilist_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'attr_str_arg) in
    Obj.repr(
# 252 "src/parser_tptp.mly"
                 ( [_1] )
# 955 "src/parser_tptp.ml"
               : 'attr_slist_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'attr_str_arg) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'attr_slist_arg_list) in
    Obj.repr(
# 253 "src/parser_tptp.mly"
                                           ( _1 :: _3 )
# 963 "src/parser_tptp.ml"
               : 'attr_slist_arg_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functor_name) in
    Obj.repr(
# 257 "src/parser_tptp.mly"
                 (_1)
# 970 "src/parser_tptp.ml"
               : 'tff_untyped_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_functor) in
    Obj.repr(
# 258 "src/parser_tptp.mly"
                    (_1)
# 977 "src/parser_tptp.ml"
               : 'tff_untyped_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'system_functor) in
    Obj.repr(
# 259 "src/parser_tptp.mly"
                   (_1)
# 984 "src/parser_tptp.ml"
               : 'tff_untyped_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functor_name) in
    Obj.repr(
# 262 "src/parser_tptp.mly"
                 (_1)
# 991 "src/parser_tptp.ml"
               : 'attr_str_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_functor) in
    Obj.repr(
# 263 "src/parser_tptp.mly"
                   (_1)
# 998 "src/parser_tptp.ml"
               : 'attr_str_arg))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_atomic_type) in
    Obj.repr(
# 267 "src/parser_tptp.mly"
                    (Symbol.create_stype []  _1)
# 1005 "src/parser_tptp.ml"
               : 'tff_top_level_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_mapping_type) in
    Obj.repr(
# 268 "src/parser_tptp.mly"
                   (_1)
# 1012 "src/parser_tptp.ml"
               : 'tff_top_level_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tff_mapping_type) in
    Obj.repr(
# 269 "src/parser_tptp.mly"
                                         (_2)
# 1019 "src/parser_tptp.ml"
               : 'tff_top_level_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_word) in
    Obj.repr(
# 272 "src/parser_tptp.mly"
                (ttf_atomic_type_fun _1)
# 1026 "src/parser_tptp.ml"
               : 'tff_atomic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_type) in
    Obj.repr(
# 273 "src/parser_tptp.mly"
                (ttf_atomic_type_fun _1)
# 1033 "src/parser_tptp.ml"
               : 'tff_atomic_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 275 "src/parser_tptp.mly"
                          (_1)
# 1040 "src/parser_tptp.ml"
               : 'defined_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 275 "src/parser_tptp.mly"
                                                   (_1)
# 1047 "src/parser_tptp.ml"
               : 'defined_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_atomic_type) in
    Obj.repr(
# 280 "src/parser_tptp.mly"
                  ([_1])
# 1054 "src/parser_tptp.ml"
               : 'tff_unitary_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'tff_xprod_type) in
    Obj.repr(
# 281 "src/parser_tptp.mly"
                       (List.rev _1)
# 1061 "src/parser_tptp.ml"
               : 'tff_unitary_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tff_unitary_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tff_atomic_type) in
    Obj.repr(
# 286 "src/parser_tptp.mly"
      (Symbol.create_stype _1 _3)
# 1069 "src/parser_tptp.ml"
               : 'tff_mapping_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'tff_unitary_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'tff_atomic_type) in
    Obj.repr(
# 288 "src/parser_tptp.mly"
      (Symbol.create_stype _2 _5)
# 1077 "src/parser_tptp.ml"
               : 'tff_mapping_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tff_atomic_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tff_atomic_type) in
    Obj.repr(
# 293 "src/parser_tptp.mly"
                                          ([_3;_1])
# 1085 "src/parser_tptp.ml"
               : 'tff_xprod_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'tff_xprod_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tff_atomic_type) in
    Obj.repr(
# 294 "src/parser_tptp.mly"
                                          (_3::_1)
# 1093 "src/parser_tptp.ml"
               : 'tff_xprod_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 319 "src/parser_tptp.mly"
                 ("")
# 1099 "src/parser_tptp.ml"
               : 'formula_annotations))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "src/parser_tptp.mly"
        ("")
# 1105 "src/parser_tptp.ml"
               : 'formula_annotations))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'source) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'optional_info) in
    Obj.repr(
# 321 "src/parser_tptp.mly"
                             ("")
# 1113 "src/parser_tptp.ml"
               : 'formula_annotations))
; (fun __caml_parser_env ->
    Obj.repr(
# 326 "src/parser_tptp.mly"
               ("")
# 1119 "src/parser_tptp.ml"
               : 'optional_info))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'source) in
    Obj.repr(
# 327 "src/parser_tptp.mly"
                (_2)
# 1126 "src/parser_tptp.ml"
               : 'optional_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plain_term) in
    Obj.repr(
# 331 "src/parser_tptp.mly"
             ("")
# 1133 "src/parser_tptp.ml"
               : 'source))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plain_term_list) in
    Obj.repr(
# 332 "src/parser_tptp.mly"
                  ("")
# 1140 "src/parser_tptp.ml"
               : 'source))
; (fun __caml_parser_env ->
    Obj.repr(
# 337 "src/parser_tptp.mly"
                 ([])
# 1146 "src/parser_tptp.ml"
               : 'plain_term_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 338 "src/parser_tptp.mly"
                           (_2)
# 1153 "src/parser_tptp.ml"
               : 'plain_term_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'disjunction) in
    Obj.repr(
# 341 "src/parser_tptp.mly"
                                      (_2)
# 1160 "src/parser_tptp.ml"
               : 'cnf_formula))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'cnf_formula) in
    Obj.repr(
# 342 "src/parser_tptp.mly"
                                                          (_3)
# 1167 "src/parser_tptp.ml"
               : 'cnf_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'disjunction) in
    Obj.repr(
# 343 "src/parser_tptp.mly"
              (_1)
# 1174 "src/parser_tptp.ml"
               : 'cnf_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 347 "src/parser_tptp.mly"
             (disjunction_fun [] _1)
# 1181 "src/parser_tptp.ml"
               : 'disjunction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'disjunction) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'literal) in
    Obj.repr(
# 348 "src/parser_tptp.mly"
                         (disjunction_fun _1 _3 )
# 1189 "src/parser_tptp.ml"
               : 'disjunction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_formula) in
    Obj.repr(
# 352 "src/parser_tptp.mly"
                (_1)
# 1196 "src/parser_tptp.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fol_infix_unary) in
    Obj.repr(
# 353 "src/parser_tptp.mly"
                  (_1)
# 1203 "src/parser_tptp.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_formula) in
    Obj.repr(
# 354 "src/parser_tptp.mly"
                          (neg_fun _2)
# 1210 "src/parser_tptp.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'atomic_formula) in
    Obj.repr(
# 355 "src/parser_tptp.mly"
                                               (neg_fun _3)
# 1217 "src/parser_tptp.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'atomic_formula) in
    Obj.repr(
# 356 "src/parser_tptp.mly"
                                      (_2)
# 1224 "src/parser_tptp.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fol_infix_unary) in
    Obj.repr(
# 357 "src/parser_tptp.mly"
                                       (_2)
# 1231 "src/parser_tptp.ml"
               : 'literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 360 "src/parser_tptp.mly"
                            (inequality_fun [_1;_3])
# 1239 "src/parser_tptp.ml"
               : 'fol_infix_unary))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plain_atomic_formula) in
    Obj.repr(
# 364 "src/parser_tptp.mly"
                          (_1)
# 1246 "src/parser_tptp.ml"
               : 'atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_atomic_formula) in
    Obj.repr(
# 365 "src/parser_tptp.mly"
                          (_1)
# 1253 "src/parser_tptp.ml"
               : 'atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'system_atomic_formula) in
    Obj.repr(
# 366 "src/parser_tptp.mly"
                          (_1)
# 1260 "src/parser_tptp.ml"
               : 'atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functor_name) in
    Obj.repr(
# 376 "src/parser_tptp.mly"
                (plain_term_fun_typed ~is_top:true _1 [])
# 1267 "src/parser_tptp.ml"
               : 'plain_atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'functor_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 378 "src/parser_tptp.mly"
      (plain_term_fun_typed ~is_top:true _1 _3)
# 1275 "src/parser_tptp.ml"
               : 'plain_atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functor_name) in
    Obj.repr(
# 384 "src/parser_tptp.mly"
               (plain_term_fun_typed ~is_top:false _1 [])
# 1282 "src/parser_tptp.ml"
               : 'plain_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'functor_name) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 385 "src/parser_tptp.mly"
                                               (plain_term_fun_typed ~is_top:false _1 _3)
# 1290 "src/parser_tptp.ml"
               : 'plain_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_word) in
    Obj.repr(
# 389 "src/parser_tptp.mly"
                            (_1)
# 1297 "src/parser_tptp.ml"
               : 'functor_name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arguments_rev) in
    Obj.repr(
# 392 "src/parser_tptp.mly"
                    (List.rev _1)
# 1304 "src/parser_tptp.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 395 "src/parser_tptp.mly"
          ([_1])
# 1311 "src/parser_tptp.ml"
               : 'arguments_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arguments_rev) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 396 "src/parser_tptp.mly"
                           (_3::_1)
# 1319 "src/parser_tptp.ml"
               : 'arguments_rev))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'function_term) in
    Obj.repr(
# 399 "src/parser_tptp.mly"
                   (_1)
# 1326 "src/parser_tptp.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'variable) in
    Obj.repr(
# 400 "src/parser_tptp.mly"
           (term_variable_fun _1)
# 1333 "src/parser_tptp.ml"
               : 'term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 406 "src/parser_tptp.mly"
            (variable_fun _1)
# 1340 "src/parser_tptp.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'plain_term) in
    Obj.repr(
# 409 "src/parser_tptp.mly"
              (_1)
# 1347 "src/parser_tptp.ml"
               : 'function_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_term) in
    Obj.repr(
# 410 "src/parser_tptp.mly"
                (_1)
# 1354 "src/parser_tptp.ml"
               : 'function_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'system_term) in
    Obj.repr(
# 411 "src/parser_tptp.mly"
               (_1)
# 1361 "src/parser_tptp.ml"
               : 'function_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_atom) in
    Obj.repr(
# 414 "src/parser_tptp.mly"
                (_1)
# 1368 "src/parser_tptp.ml"
               : 'defined_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_atomic_term) in
    Obj.repr(
# 415 "src/parser_tptp.mly"
                       (_1)
# 1375 "src/parser_tptp.ml"
               : 'defined_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'number) in
    Obj.repr(
# 418 "src/parser_tptp.mly"
          (_1)
# 1382 "src/parser_tptp.ml"
               : 'defined_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_plain_term) in
    Obj.repr(
# 422 "src/parser_tptp.mly"
                      (_1)
# 1389 "src/parser_tptp.ml"
               : 'defined_atomic_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_functor) in
    Obj.repr(
# 425 "src/parser_tptp.mly"
                   (defined_term_fun _1 [])
# 1396 "src/parser_tptp.ml"
               : 'defined_plain_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'defined_functor) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 426 "src/parser_tptp.mly"
                                                  ( defined_term_fun _1 _3)
# 1404 "src/parser_tptp.ml"
               : 'defined_plain_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'system_functor) in
    Obj.repr(
# 429 "src/parser_tptp.mly"
                  (system_term_fun _1 [])
# 1411 "src/parser_tptp.ml"
               : 'system_term))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'system_functor) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 430 "src/parser_tptp.mly"
                                                 ( system_term_fun _1 _3)
# 1419 "src/parser_tptp.ml"
               : 'system_term))
; (fun __caml_parser_env ->
    Obj.repr(
# 448 "src/parser_tptp.mly"
             ("=")
# 1425 "src/parser_tptp.ml"
               : 'defined_functor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 449 "src/parser_tptp.mly"
               (_1)
# 1432 "src/parser_tptp.ml"
               : 'defined_functor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 452 "src/parser_tptp.mly"
                     (_1)
# 1439 "src/parser_tptp.ml"
               : 'system_functor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_plain_formula) in
    Obj.repr(
# 461 "src/parser_tptp.mly"
                        (_1)
# 1446 "src/parser_tptp.ml"
               : 'defined_atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_infix_formula) in
    Obj.repr(
# 462 "src/parser_tptp.mly"
                        (_1)
# 1453 "src/parser_tptp.ml"
               : 'defined_atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'system_plain_formula) in
    Obj.repr(
# 465 "src/parser_tptp.mly"
                       (_1)
# 1460 "src/parser_tptp.ml"
               : 'system_atomic_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'defined_functor) in
    Obj.repr(
# 469 "src/parser_tptp.mly"
                    (defined_pred_fun _1 [])
# 1467 "src/parser_tptp.ml"
               : 'defined_plain_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'defined_functor) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 470 "src/parser_tptp.mly"
                                                  ( defined_pred_fun _1 _3)
# 1475 "src/parser_tptp.ml"
               : 'defined_plain_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'system_functor) in
    Obj.repr(
# 473 "src/parser_tptp.mly"
                   (system_pred_fun _1 [])
# 1482 "src/parser_tptp.ml"
               : 'system_plain_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'system_functor) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 474 "src/parser_tptp.mly"
                                                 ( system_pred_fun _1 _3)
# 1490 "src/parser_tptp.ml"
               : 'system_plain_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'term) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'defined_infix_pred) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'term) in
    Obj.repr(
# 484 "src/parser_tptp.mly"
                                    (defined_infix_pred_fun _2 _1 _3)
# 1499 "src/parser_tptp.ml"
               : 'defined_infix_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'infix_equality) in
    Obj.repr(
# 486 "src/parser_tptp.mly"
                                     (_1)
# 1506 "src/parser_tptp.ml"
               : 'defined_infix_pred))
; (fun __caml_parser_env ->
    Obj.repr(
# 488 "src/parser_tptp.mly"
                          ("=")
# 1512 "src/parser_tptp.ml"
               : 'infix_equality))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 491 "src/parser_tptp.mly"
                         (_1)
# 1519 "src/parser_tptp.ml"
               : 'formula_role))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'integer) in
    Obj.repr(
# 495 "src/parser_tptp.mly"
         ((term_of_int_number_fun _1))
# 1526 "src/parser_tptp.ml"
               : 'number))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rational) in
    Obj.repr(
# 496 "src/parser_tptp.mly"
           ((term_of_rat_number_fun _1))
# 1533 "src/parser_tptp.ml"
               : 'number))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'real) in
    Obj.repr(
# 497 "src/parser_tptp.mly"
        ((term_of_real_number_fun _1))
# 1540 "src/parser_tptp.ml"
               : 'number))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'signed_rational) in
    Obj.repr(
# 503 "src/parser_tptp.mly"
                  (_1)
# 1547 "src/parser_tptp.ml"
               : 'rational))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_rational) in
    Obj.repr(
# 503 "src/parser_tptp.mly"
                                           (_1)
# 1554 "src/parser_tptp.ml"
               : 'rational))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_rational) in
    Obj.repr(
# 506 "src/parser_tptp.mly"
                            (_2)
# 1561 "src/parser_tptp.ml"
               : 'signed_rational))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_rational) in
    Obj.repr(
# 508 "src/parser_tptp.mly"
  ( 
   let (num,denom) = _2 in
   (-num,denom)
  )
# 1571 "src/parser_tptp.ml"
               : 'signed_rational))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 514 "src/parser_tptp.mly"
                           (
   let num = int_of_string _1 in 
   let denom = int_of_string _3 in
   if denom > 0 then 
     (num,denom)
   else 
     failwith ("Parsing: division by zero in "^_1^"/"^_3)
)
# 1586 "src/parser_tptp.ml"
               : 'unsigned_rational))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'signed_real) in
    Obj.repr(
# 525 "src/parser_tptp.mly"
              (_1)
# 1593 "src/parser_tptp.ml"
               : 'real))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_real) in
    Obj.repr(
# 525 "src/parser_tptp.mly"
                                   (_1)
# 1600 "src/parser_tptp.ml"
               : 'real))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_real) in
    Obj.repr(
# 528 "src/parser_tptp.mly"
                        (_2)
# 1607 "src/parser_tptp.ml"
               : 'signed_real))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_real) in
    Obj.repr(
# 529 "src/parser_tptp.mly"
                         (
      let real = _2 in 
      real.real_fraction <- (~-. (real.real_fraction)); 
      real )
# 1617 "src/parser_tptp.ml"
               : 'signed_real))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decimal_fraction) in
    Obj.repr(
# 534 "src/parser_tptp.mly"
                                 (_1)
# 1624 "src/parser_tptp.ml"
               : 'unsigned_real))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decimal_exponent) in
    Obj.repr(
# 534 "src/parser_tptp.mly"
                                                         (_1)
# 1631 "src/parser_tptp.ml"
               : 'unsigned_real))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 538 "src/parser_tptp.mly"
  (
   let real = 
     {
      real_fraction = float_of_string _1;
      real_exponent = 0
    }
   in real
 )
# 1645 "src/parser_tptp.ml"
               : 'decimal_fraction))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 548 "src/parser_tptp.mly"
                   (
  let real = 
      {
       real_fraction = float_of_string _1;
       real_exponent = 1}
  in real 
  )
# 1658 "src/parser_tptp.ml"
               : 'decimal_exponent))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'signed_integer) in
    Obj.repr(
# 558 "src/parser_tptp.mly"
                (_1)
# 1665 "src/parser_tptp.ml"
               : 'integer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_integer) in
    Obj.repr(
# 559 "src/parser_tptp.mly"
                    (_1)
# 1672 "src/parser_tptp.ml"
               : 'integer))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_integer) in
    Obj.repr(
# 562 "src/parser_tptp.mly"
                       (_2)
# 1679 "src/parser_tptp.ml"
               : 'signed_integer))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'unsigned_integer) in
    Obj.repr(
# 563 "src/parser_tptp.mly"
                         (-_2)
# 1686 "src/parser_tptp.ml"
               : 'signed_integer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 565 "src/parser_tptp.mly"
                           (int_of_string _1)
# 1693 "src/parser_tptp.ml"
               : 'unsigned_integer))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'atomic_word) in
    Obj.repr(
# 570 "src/parser_tptp.mly"
                 (_1)
# 1700 "src/parser_tptp.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'integer_string) in
    Obj.repr(
# 571 "src/parser_tptp.mly"
                 (_1)
# 1707 "src/parser_tptp.ml"
               : 'name))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 574 "src/parser_tptp.mly"
               (_1)
# 1714 "src/parser_tptp.ml"
               : 'atomic_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'single_quoted) in
    Obj.repr(
# 575 "src/parser_tptp.mly"
                (_1)
# 1721 "src/parser_tptp.ml"
               : 'atomic_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'key_word) in
    Obj.repr(
# 576 "src/parser_tptp.mly"
           (_1)
# 1728 "src/parser_tptp.ml"
               : 'atomic_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 579 "src/parser_tptp.mly"
           (_1)
# 1735 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 580 "src/parser_tptp.mly"
         (_1)
# 1742 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 581 "src/parser_tptp.mly"
         (_1)
# 1749 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 582 "src/parser_tptp.mly"
         (_1)
# 1756 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 583 "src/parser_tptp.mly"
         (_1)
# 1763 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 584 "src/parser_tptp.mly"
           (_1)
# 1770 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 585 "src/parser_tptp.mly"
        (_1)
# 1777 "src/parser_tptp.ml"
               : 'key_word))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 588 "src/parser_tptp.mly"
               (disquote_string _1)
# 1784 "src/parser_tptp.ml"
               : 'single_quoted))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 591 "src/parser_tptp.mly"
             (_1)
# 1791 "src/parser_tptp.ml"
               : 'integer_string))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 592 "src/parser_tptp.mly"
               (("+"^_2))
# 1798 "src/parser_tptp.ml"
               : 'integer_string))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 593 "src/parser_tptp.mly"
                (("-"^_2))
# 1805 "src/parser_tptp.ml"
               : 'integer_string))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : unit)
