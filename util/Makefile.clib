# Build an interface to a C++ library from the following parts:
# 
# - src/$(CLIBNAME)_stubs.cpp: Stub code to call the library $(CLIBNAME)
# - src/$(CLIBNAME).mli: Interface of the OCaml library
# - src/$(CLIBNAME).ml: Implementation of the OCaml library
#
# This is a sub-Makefile to be called with the following variables set
# 
# - $(CLIBNAME) Name of the C++ library
# - $(CLIBINCDIR) Location if include files (-I flag)
# - $(CLIBLIBDIR) Location if library files (-L flag)
# - $(OCAMLINCDIR) Location of OCaml include files
# - $(AR) Executable for ar command 
# - $(CXX) C++ compiler
# - $(RANLIB) Executable for ranlib command
# - $(OCAMLC) OCaml compiler
# - $(OCAMLOPT) OCaml native compiler
# - $(EXTRACCLIB) Extra -cclib flags 
# - $(EXTRACCOPT) Extra -ccopt flags 
#
# Results in 
# 
# - lib/$(CLIBNAME).cmxa, lib/$(CLIBNAME)_stubs.a 

OBJECTS = lib/$(CLIBNAME)_stubs.o lib/$(CLIBNAME).cmi			\
	  lib/$(CLIBNAME).cmo lib/$(CLIBNAME).cmx lib/$(CLIBNAME).o	\
	  lib/lib$(CLIBNAME)_stubs.a lib/$(CLIBNAME).cma		\
	  lib/$(CLIBNAME).a lib/$(CLIBNAME).cmxa

.PHONY: $(CLIBNAME)-ocaml

# Build OCaml and C part of the library 
$(CLIBNAME)-ocaml: $(OBJECTS)

.PHONY: clean-$(CLIBNAME)-ocaml

clean-$(CLIBNAME)-ocaml:
	rm -f $(OBJECTS)

# C object file for stub code 
lib/$(CLIBNAME)_stubs.o: src/$(CLIBNAME)_stubs.cpp
	$(CXX) -c -O3 -o $@ -I$(OCAMLINCDIR) -I$(CLIBINCDIR) $<
#	$(CXX) -c -O3 -pg -g -o $@ -I$(OCAMLINCDIR) -I$(CLIBINCDIR) $<

# Compiled interface for OCaml
lib/$(CLIBNAME).cmi: src/$(CLIBNAME).mli
	$(OCAMLC) -c -o $@ $<

# Byte-code of implementation 
lib/$(CLIBNAME).cmo: src/$(CLIBNAME).ml lib/$(CLIBNAME).cmi 
	$(OCAMLC) -c -I $(CURDIR)/obj -I $(CURDIR)/lib -o $@ $<

# Native code of implementation 
lib/$(CLIBNAME).cmx lib/$(CLIBNAME).o: src/$(CLIBNAME).ml lib/$(CLIBNAME).cmi 
	$(OCAMLOPT) -c -I $(CURDIR)/lib -o $@ $<

# Pack C code into an archive 
lib/lib$(CLIBNAME)_stubs.a: lib/$(CLIBNAME)_stubs.o
	$(AR) rc $@ $^
	$(RANLIB) $@

# For linking: must have -cclib -lminisat and -cclib -lstdc++ after
# src/minisat_stubs.o

# Pack byte-code OCaml implementation into library 
lib/$(CLIBNAME).cma lib/$(CLIBNAME).a: lib/$(CLIBNAME).cmo lib/lib$(CLIBNAME)_stubs.a 
	$(OCAMLC) -a -custom -I $(CURDIR)/lib -o $@ $< -cclib -L$(CURDIR)/lib -cclib -L$(CLIBLIBDIR) -cclib -l$(CLIBNAME)_stubs -cclib -l$(CLIBNAME) -cclib -lstdc++ $(EXTRACCLIB) $(EXTRACCOPT)

# Pack native code OCaml implementation into library 
lib/$(CLIBNAME).cmxa lib/$(CLIBNAME).a: lib/$(CLIBNAME).cmx lib/lib$(CLIBNAME)_stubs.a 
	$(OCAMLOPT) -a -I $(CURDIR)/lib -o $@ $< -cclib -L$(CURDIR)/lib -cclib -L$(CLIBLIBDIR) -cclib -l$(CLIBNAME)_stubs -cclib -l$(CLIBNAME) -cclib -lstdc++  $(EXTRACCLIB) $(EXTRACCOPT) 

# lib/dll$(CLIBNAME).so:
# 	$(CC) -shared -o $@ -L$(CURDIR)/lib -L$(CLIBLIBDIR) -l$(CLIBNAME)_stubs -l$(CLIBNAME) -lstdc++

$(CLIBNAME)_test.cmo: src/$(CLIBNAME)_test.ml
	$(OCAMLC) -c -I $(CURDIR)/lib -o $@ $^

$(CLIBNAME)_test.cmx: src/$(CLIBNAME)_test.ml
	$(OCAMLOPT) -c -I $(CURDIR)/lib -o $@ $^

$(CLIBNAME)-test: lib/$(CLIBNAME).cmxa $(CLIBNAME)_test.cmx 
	$(OCAMLOPT) -I $(CURDIR)/lib -o $@ $^

# $(CLIBNAME)-test-bc: lib/$(CLIBNAME).cma $(CLIBNAME)_test.cmo
# 	$(OCAMLC) -I $(CURDIR)/lib -o $@ $^

# # FIXME: open Minisat;; in resulting toplevel fails
# $(CLIBNAME)-top: lib/dll$(CLIBNAME).so lib/$(CLIBNAME).cma
# 	$(OCAMLMKTOP) -custom -I $(CURDIR)/lib -o $@ $^ -cclib -L$(CURDIR)/lib -cclib -ldll$(CLIBNAME)
